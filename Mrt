import matplotlib.pyplot as plt
import networkx as nx
import csv


G1 = nx.Graph()  # 建立：空的 無向圖
pos={}
with open('TPE.csv', newline='') as csvfile:
    rows = list(csv.DictReader(csvfile))
    print(len(rows))
    i=1
    has_add = {}
    rep = {}
    line_code_temp = ""
    line_change = False
    line_branch = False
    st_rep = True
    st_rep_temp = 0
    for row in rows:
        if line_code_temp != row['line_code']:
                line_change = True
                line_code_temp = row['line_code'] 
        else:
            line_change = False
        if row['station_name_tw'] not in has_add:
            
            G1.add_node(i, station=row['station_code'], line_code=row['line_code'], name_tw=row['station_name_tw'])
            has_add.update({row['station_name_tw']:i})
            pos.update({i: (float(row["lon"]),float(row["lat"]))})
            if i!=1 and line_change == False and st_rep == False:
                

                if row['station_name_tw'] == "三重國小":#特殊情況處理
                    G1.add_edge(i,has_add["大橋頭"])

                elif line_branch == True: #支線處理
                    line_branch = False
                    G1.add_edge(i,i-2)
                
                else:#一般邊緣
                    
                    G1.add_edge(i,i-1)

                if row['station_code'][-1:] == "A":#判斷是否為支線
                    line_branch = True
            elif i != 0 and line_change==False and st_rep:
                G1.add_edge(i, st_rep_temp)
            
            st_rep = False #無重複            
            i+=1
        else:
            #有重複時 新增至rep 並記下點位
            if not st_rep:
                i_temp = i
            st_rep = True
            
            rep.update({row['station_name_tw']:has_add[row['station_name_tw']]})
            if line_change == False:
                st_rep_temp = int(rep[row['station_name_tw']])
                #print(st_rep_temp,i)
                G1.add_edge(i_temp - 1, st_rep_temp)
                i_temp = st_rep_temp + 1
        
        
G1.remove_edges_from([(116, 97), (109, 24)])
G1.add_edges_from([(116, 115), (109, 56)])
#print(line_code_temp)
#print(rep)
'''
line_temp = ""
st_temp   = ""
ct        = False
total_node=len(G1.nodes())
for eh in range(1, total_node):    
    #print(G1._node[eh]['station'])
    if line_temp == "":
        line_temp = str(G1._node[eh]['line_code'])
    if ct: 
        ct = False
        continue
    print(st_temp)
    st_temp = str(G1._node[eh]['station'][-1:])
    if not st_temp.isdigit(): 
        ct = True
        continue
    
    if eh != 1:
        G1.add_edge(eh, eh-1)
'''    
    

#print(G1._node.keys)
print(G1._node[115])
print(G1._node[116])
print(G1._node[97])
#print(pos[1])

#shortest path
source = int(input("輸入起點:"))
target = int(input("輸入終點:"))
shortestpath=nx.shortest_path(G1,source=source,target=target)

edge_colors=[]

for u,v in G1.edges: #edges color
    if any([u,v] == shortestpath[i:i+2] for i in range(len(shortestpath)-1)):
        edge_colors.append("red")
#        print(u,v)
    elif any([v,u] == shortestpath[i:i+2] for i in range(len(shortestpath)-1)):
        edge_colors.append("red")
    else:
        edge_colors.append("black")

node_colors = ["red" if n in shortestpath else "#1f78b4" for n in G1.nodes()]

print(shortestpath)

options = {
    "font_size": 12,
    "node_size": 300,
    "node_color": node_colors,
    "edge_color": edge_colors, 
    "linewidths": 1.0,
    "width": 1.0,
}

nx.draw_networkx(G1, pos, with_labels=True,**options)

plt.show()